-module(factorial).
-behaviour(gen_server).

%% API
-export([start/1, stop/1, start_link/1]).
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).
-define(SERVER, ?MODULE).

start(Name) ->
    _sup:start_child(Name).

stop(Name) ->
    gen_server:call(Name, stop).

for(X) -> gen_server:call(?MODULE,{fact, X}).

start_link(Name) ->
    gen_server:start_link({local, Name}, ?MODULE, [], []).

init(_Args) ->
    {ok, #state{dummy=1}}.

handle_call({fact, X}, _From, State) ->
    Result = fact_helper(X, State)
    {reply,
        fact_helper(X, State),
        {X, State}}.

handle_call(stop, _From, State) ->
    {stop, normal, stopped, State};

handle_call(_Request, _From, State) ->
    {reply, ok, State}.

handle_cast(_Msg, State) ->
    {noreply, State}.

handle_info(_Info, State) ->
    {noreply, State}.

terminate(_Reason, _State) ->
    ok.

code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

fact_helper(N, {Last, Last_factorial}) when N > Last ->
    factorial(N, Last, Last_factorial);
fact_helper(N,_) ->
    factorial(N, 0, 1).

factorial(Y, 0, _) ->
    factorial(Y, 1, 1);
factorial(Y, Z, Accum) when Z < Y ->
    factorial(Y, Z+1, (Z+1)*Accum);
factorial(_, _, Accum) ->
    Accum.